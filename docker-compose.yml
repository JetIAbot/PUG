version: '3.8'

services:
  # Servicio principal de la aplicación web
  web:
    build: .
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis
    volumes:
      - ./logs:/app/logs
      - ./credenciales.json:/app/credenciales.json:ro
      - ./.env:/app/.env:ro
    restart: unless-stopped
    networks:
      - pug-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Servicio Redis para Celery
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - pug-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Worker de Celery para procesamiento asíncrono
  celery:
    build: .
    command: celery -A src.app.celery_app worker --loglevel=info --pool=solo
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
    volumes:
      - ./logs:/app/logs
      - ./credenciales.json:/app/credenciales.json:ro
      - ./.env:/app/.env:ro
    restart: unless-stopped
    networks:
      - pug-network

  # Monitor de Celery (opcional para desarrollo)
  flower:
    build: .
    command: celery -A src.app.celery_app flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - pug-network
    profiles:
      - monitoring

  # Nginx como proxy reverso (opcional para producción)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    restart: unless-stopped
    networks:
      - pug-network
    profiles:
      - production

volumes:
  redis_data:
    driver: local

networks:
  pug-network:
    driver: bridge
