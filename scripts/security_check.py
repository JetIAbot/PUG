"""
Script de verificaci√≥n de seguridad para desarrollo con datos reales
"""
import os
import sys
from dotenv import load_dotenv

def check_security_configuration():
    """Verificar que todas las medidas de seguridad est√°n correctamente configuradas"""
    
    print("üîí VERIFICACI√ìN DE SEGURIDAD - DATOS REALES")
    print("=" * 50)
    
    # Cargar variables de entorno
    load_dotenv()
    
    checks_passed = 0
    total_checks = 10
    
    # 1. Verificar enmascaramiento de credenciales
    mask_credentials = os.getenv('MASK_CREDENTIALS', 'False').lower() == 'true'
    print(f"‚úÖ Enmascaramiento de credenciales: {'ACTIVO' if mask_credentials else '‚ùå INACTIVO'}")
    if mask_credentials:
        checks_passed += 1
    
    # 2. Verificar que no se loguean datos sensibles
    log_sensitive = os.getenv('LOG_SENSITIVE_DATA', 'True').lower() == 'false'
    print(f"‚úÖ Protecci√≥n de datos sensibles: {'ACTIVO' if log_sensitive else '‚ùå INACTIVO'}")
    if log_sensitive:
        checks_passed += 1
    
    # 3. Verificar retenci√≥n limitada de logs
    retention_days = int(os.getenv('LOG_RETENTION_DAYS', '30'))
    retention_ok = retention_days <= 7
    print(f"‚úÖ Retenci√≥n de logs: {retention_days} d√≠as ({'OK' if retention_ok else '‚ùå DEMASIADO LARGO'})")
    if retention_ok:
        checks_passed += 1
    
    # 4. Verificar limpieza autom√°tica
    auto_cleanup = os.getenv('AUTO_CLEANUP', 'False').lower() == 'true'
    print(f"‚úÖ Limpieza autom√°tica: {'ACTIVO' if auto_cleanup else '‚ùå INACTIVO'}")
    if auto_cleanup:
        checks_passed += 1
    
    # 5. Verificar modo de producci√≥n
    production_mode = os.getenv('PRODUCTION_MODE', 'False').lower() == 'true'
    print(f"‚úÖ Modo de producci√≥n: {'ACTIVO' if production_mode else '‚ùå INACTIVO'}")
    if production_mode:
        checks_passed += 1
    
    # 6. Verificar autorizaci√≥n
    real_data_auth = os.getenv('REAL_DATA_AUTHORIZED', 'False').lower() == 'true'
    print(f"‚úÖ Autorizaci√≥n para datos reales: {'CONFIRMADA' if real_data_auth else '‚ùå NO AUTORIZADA'}")
    if real_data_auth:
        checks_passed += 1
    
    # 7. Verificar modo de usuario √∫nico
    single_user = os.getenv('SINGLE_USER_MODE', 'False').lower() == 'true'
    print(f"‚úÖ Modo de usuario √∫nico: {'ACTIVO' if single_user else '‚ùå INACTIVO'}")
    if single_user:
        checks_passed += 1
    
    # 8. Verificar timeout de sesi√≥n
    session_timeout = int(os.getenv('SESSION_TIMEOUT', '3600'))
    timeout_ok = session_timeout <= 1800  # M√°ximo 30 minutos
    print(f"‚úÖ Timeout de sesi√≥n: {session_timeout//60} min ({'OK' if timeout_ok else '‚ùå DEMASIADO LARGO'})")
    if timeout_ok:
        checks_passed += 1
    
    # 9. Verificar que .env existe y est√° protegido
    env_exists = os.path.exists('.env')
    print(f"‚úÖ Archivo .env: {'EXISTE' if env_exists else '‚ùå NO ENCONTRADO'}")
    if env_exists:
        checks_passed += 1
    
    # 10. Verificar .gitignore para protecci√≥n
    gitignore_exists = os.path.exists('.gitignore')
    gitignore_ok = False
    if gitignore_exists:
        with open('.gitignore', 'r') as f:
            content = f.read()
            if '.env' in content and '*.log' in content:
                gitignore_ok = True
    print(f"‚úÖ Protecci√≥n .gitignore: {'CONFIGURADO' if gitignore_ok else '‚ùå INCOMPLETO'}")
    if gitignore_ok:
        checks_passed += 1
    
    print("\n" + "=" * 50)
    print(f"RESULTADO: {checks_passed}/{total_checks} verificaciones pasadas")
    
    if checks_passed == total_checks:
        print("üéâ CONFIGURACI√ìN DE SEGURIDAD COMPLETA")
        print("‚úÖ Es seguro proceder con datos reales")
        return True
    else:
        print("‚ùå CONFIGURACI√ìN INCOMPLETA")
        print("‚ö†Ô∏è  Configurar todas las medidas antes de usar datos reales")
        return False

def show_security_reminders():
    """Mostrar recordatorios importantes de seguridad"""
    print("\nüö® RECORDATORIOS DE SEGURIDAD:")
    print("- Solo usar durante sesiones de desarrollo activas")
    print("- Cerrar completamente la aplicaci√≥n despu√©s de cada uso")
    print("- Verificar limpieza de logs despu√©s de cada sesi√≥n")
    print("- NO compartir credenciales con terceros")
    print("- NO hacer commit de archivos con datos reales")
    print("- Mantener registro de todos los accesos")

if __name__ == "__main__":
    print("Iniciando verificaci√≥n de seguridad...")
    
    if check_security_configuration():
        show_security_reminders()
        print("\n‚úÖ Sistema listo para uso seguro con datos reales")
        sys.exit(0)
    else:
        print("\n‚ùå Sistema NO est√° listo. Configurar medidas de seguridad primero.")
        sys.exit(1)
